      / Quaestor min 30    				   \
     / Aedile    min 36 + 2y (experience of being Quaestor) \ 
    / Praetor    min 39 + 2y (experience of being Aedil)     \
   / Consul      min 42 + 2y (experience of being Praetor)    \ 

LIFE_EXPECTANCY  distribution
#DEFINE PSI 100



----------RETURNING AND THEIR TYPES:--------------------
PSI
vector<FILL PERCENTAGE>
array<AGE>

----------CLASSES -------------------------------------
class Politician 
{
public:
   int age;
   string experience;
//Quaestor 
   bool isElligible4Q(age, experience){ 
        if (age=>36 && 2yearsQ)
           return true;

 else return false;
}
//Aedile 
   bool isElligible4A(age, experience){ 
    if (age=>36 && 2yearsQ) // Minimum age 36, with at least 2 years of service
 as Quaestor required
        return true;
  else 
     return false;
} 
//Praetor
   bool isElligible4P(age, experience){
       if (age=>39 && 2yearsA) // Minimum age 39, with at least 2 years of service
 as Aedile required
        return true;
  else 
     return false;

}

//Aedile
   bool isElligible4C(age, experience){
         if (tenYearGap && (age=>42 && 2yearsP)) // Minimum age 42, with at least 2 years of service
 as Praetor required and 10 year interval required for re election attempts
        return true;
  else 
     return false;
}

};

FIELD: timeofdeath of the politicians 
first counslor date initilize as small number 
---------------------------------------------
         for psi!!!!
vector Quaestor int<> size= 20 
vector Aediles int<> size= 10
vector Praetors int<> size= 8
vector Consuls int<> size= 2


-----------------------------------------------


int PSI(){
//PSI Calculation
int PSI = 100;
 if(unfilledPositionFound)
{
   PSI -=5;
}
 if(reelectingConsulFound) 
{
   PSI -=10;
}

 return PSI; 
}

void winner(elligible politicians)
{ 
   generate random politician 
}


-----generate random winner if : --------------
    1-group of quaestor elected stay elligible until they die
    2-politician candidates for higher rank

+ FIRST higher offices 
+ THEN lower offices
    


-------Simulation Dynamics:----------
+ INITIAL : political landscape + psi
+ Simulate:
      -
+ UPDATES: 
      - AGE+=1 //every year 
      - if (died || supassedLifeExpectancy))
             POLITICIAN --;
      - PSI() //update psi and check for penalties
       
+



-------------MAIN OUTPUT:-------------- 
1- return PSI 
2- retun annualFillRate 
3- Historgram of age distribution  






















#include <cstdlib>
#include <ctime>

int simulateLifeExpectancy() {
    // Seed the random number generator
    srand(static_cast<unsigned int>(time(nullptr)));

    // Generate a random life expectancy within the specified range
    int life_expectancy;
    do {
        life_expectancy = static_cast<int>(std::round(lifeExpecMEAN + lifeExpecSTDV * (static_cast<double>(std::rand()) / RAND_MAX * 2 - 1)));
    } while (life_expectancy < lifeExpecMIN || life_expectancy > lifeExpecMAX);

    return life_expectancy;
}







bool unfilledPositionFound(unordered_map<string, int>& officePositions) {
    for (auto& pair : officePositions) {
        if (pair.second > 0) {
            return true; // Unfilled position found
        }
    }
    return false; // No unfilled positions
}

// Function to check if there is a consul being re-elected within 10 years
bool reelectingConsulFound(queue<Politician>& candidates) {
    int consulCount = 0;
    while (!candidates.empty()) {
        if (candidates.front().level == "Consul") {
            consulCount++;
            if (consulCount > 1) {
                return true; // Consul re-elected within 10 years found
            }
        }
        candidates.pop();
    }
    return false; // No consul re-elected within 10 years
}

// Function to calculate the Political Stability Index (PSI)
int calculatePSI(unordered_map<string, int>& officePositions) {
    int psi = 100; // Starting PSI
    for (auto& pair : officePositions) {
        if (pair.second > 0) {
            psi -= 5; // Penalty for each unfilled position
        }
    }
    if (reelectingConsulFound(candidates)) {
        psi -= 10; // Additional penalty for re-electing a Consul within 10 years
    }
    return psi;
}

// Function to update the level of a politician
string updateLevel(Politician& p) {
    if (p.level == "Quaestor" && p.age >= 36) {
        return "Aedile"; // Promote Quaestor to Aedile if age requirement is met
    } else if (p.level == "Aedile" && p.age >= 39) {
        return "Praetor"; // Promote Aedile to Praetor if age requirement is met
    } else if (p.level == "Praetor" && p.age >= 42) {
        return "Consul"; // Promote Praetor to Consul if age requirement is met
    } else {
        return p.level; // No level change
    }
}

// Function to simulate the annual election process and career progression
void simulateAnnualElections(queue<Politician>& candidates, unordered_map<string, int>& officePositions) {
    while (!candidates.empty()) {
        Politician p = candidates.front();
        candidates.pop();
        if (officePositions[p.level] > 0) {
            officePositions[p.level]--; // Fill the office position
            p.level = updateLevel(p); // Update politician's level
            candidates.push(p); // Push politician back into the queue
        }
    }
}

// Function to update the ages of politicians and remove those who have surpassed their life expectancy
void updateAgesAndRemovePoliticians(queue<Politician>& candidates) {
    int candidateCount = candidates.size();
    for (int i = 0; i < candidateCount; ++i) {
        Politician p = candidates.front();
        candidates.pop();
        p.age++; // Increment politician's age
        if (p.age <= simulateLifeExpectancy()) {
            candidates.push(p); // Push politician back into the queue if still within life expectancy
        }
    }
}

// Function to generate new candidates for the election
void generateNewCandidates(queue<Politician>& candidates) {
    int influx = 15 + rand() % 6; // Annual Influx of New Candidates
    for (int i = 0; i < influx; ++i) {
        Politician p;
        p.age = 30; // Minimum age for Quaestor
        p.level = "Quaestor"; // New candidates start as Quaestor
        candidates.push(p);
    }
}

// Function to print the final results
void printResults(queue<Politician>& candidates, unordered_map<string, int>& officePositions, int finalPSI) {
    cout << "End-of-Simulation PSI: " << finalPSI << endl;

    cout << "Annual Fill Rate:" << endl;
    cout << "Quaestor: " << (20 - officePositions["Quaestor"]) / 200.0 * 100 << "%" << endl;
    cout << "Aedile: " << (10 - officePositions["Aedile"]) / 200.0 * 100 << "%" << endl;
    cout << "Praetor: " << (8 - officePositions["Praetor"]) / 200.0 * 100 << "%" << endl;
    cout << "Consul: " << (2 - officePositions["Consul"]) / 200.0 * 100 << "%" << endl;

    // Age distribution of politicians in different offices
    // You would need to collect age information from the 'candidates' queue
    // and then calculate the distribution for each office level.
}
